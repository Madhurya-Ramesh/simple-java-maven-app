# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
env:
  COVERAGE_THRESHOLD: 20
  CODE_SMELLS_THRESHOLD: 20
  VULNERABILITIES_THRESHOLD: 2
  BUGS_THRESHOLD: 2
  #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

name: Maven 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: List
      run: |
        ls 
        pwd
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
        
 
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
    - name: What are the env variables?
      run: env
    - name: Build and analyze
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Madhurya-Ramesh_simple-java-maven-app
        #pwd
     
      
         
        
   
        
        
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: Artifact
        path: target/*.jar
    - name: Junit tests
      run: mvn -B test --file pom.xml 
      
    - name: Build and push docker
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
       image: 1107455/my_repo55
       registry: docker.io
       tags: latest2
       username: ${{ secrets.DOCKER_USERNAME }}
       password: ${{ secrets.DOCKER_PASSWORD }}
     
      
    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
          name: jacoco-report
          path: target/site/jacoco/
    - name: Sonarcloud api call
      env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
           curl --location --request -s -X GET 'https://sonarcloud.io/api/measures/component?metricKeys=code_smells,coverage,duplicated_lines_density,vulnerabilities,security_hotspots,critical_violations,bugs&component=IamAdonis_simple-java-maven-app' --header 'Authorization: Bearer ${{ secrets.SONAR_TOKEN }}' | jq "." > myfile.json
           echo "-------"
           cat myfile.json
           echo "-------"
           while read jsonData ;
           do
             metric=$(jq -r '.metric' <<< $jsonData)
             value=$(jq -r '.value'<<< $jsonData)
             echo "$metric"
             echo "$value"
            
            
           if [ "$metric" == "coverage" ] ;
              then
                if [ "${value%.*}" -le ${{env.COVERAGE_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} : ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} : ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
                  
             elif [ "$metric" == "bugs" ] ;           
              then
                if [ "${value%.*}" -ge ${{env.BUGS_THRESHOLD}} ];
                  then
                  echo "Expected ${metric%.*} : ${{env.BUGS_THRESHOLD}}"
                  echo "Actual ${metric%.*} :${value%.*}"
                  echo "Sonar code coverage gate: Failed"
                  exit 1
                else  
                  echo "Expected ${metric%.*} : ${{env.BUGS_THRESHOLD}}"
                  echo "Actual ${metric%.*} :${value%.*}"
                  echo "Sonar code coverage gate: Passed"
                fi  
     
                  
            elif [ "$metric" == "code_smells" ] ;
              then
                if [ "${value%.*}" -ge ${{env.CODE_SMELLS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} : ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} : ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            elif [ "$metric" == "vulnerabilities" ] ;
              then
                if [ "${value%.*}" -gt ${{env.VULNERABILITIES_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} : ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} : ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} : ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            fi       
            done<<< $(jq -c '.component.measures[]' $PWD/myfile.json)
           echo "----"
           cat $PWD/myfile.json
           #cat myfile.json
           
           



          




































          

          

          

          
    
    
        
     
